{
	"0": {
		"annotation": "formal language parsing test data",
		"problem_index": 0,
		"formal_languages": [
			"Point(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"1": {
		"annotation": "formal language parsing test data",
		"problem_index": 1,
		"formal_languages": [
			"Line(AB)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"2": {
		"annotation": "formal language parsing test data",
		"problem_index": 2,
		"formal_languages": [
			"Angle(ABC)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"3": {
		"annotation": "formal language parsing test data",
		"problem_index": 3,
		"formal_languages": [
			"Arc(AB)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"4": {
		"annotation": "formal language parsing test data",
		"problem_index": 4,
		"formal_languages": [
			"Shape(ABCDE)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"5": {
		"annotation": "formal language parsing test data",
		"problem_index": 5,
		"formal_languages": [
			"Circle(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"6": {
		"annotation": "formal language parsing test data",
		"problem_index": 6,
		"formal_languages": [
			"Sector(OAB)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"7": {
		"annotation": "formal language parsing test data",
		"problem_index": 7,
		"formal_languages": [
			"Triangle(ABC)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"8": {
		"annotation": "formal language parsing test data",
		"problem_index": 8,
		"formal_languages": [
			"RightTriangle(ABC)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"9": {
		"annotation": "formal language parsing test data",
		"problem_index": 9,
		"formal_languages": [
			"IsoscelesTriangle(ABC)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"10": {
		"annotation": "formal language parsing test data",
		"problem_index": 10,
		"formal_languages": [
			"RegularTriangle(ABC)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"11": {
		"annotation": "formal language parsing test data",
		"problem_index": 11,
		"formal_languages": [
			"Quadrilateral(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"12": {
		"annotation": "formal language parsing test data",
		"problem_index": 12,
		"formal_languages": [
			"Trapezoid(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"13": {
		"annotation": "formal language parsing test data",
		"problem_index": 13,
		"formal_languages": [
			"IsoscelesTrapezoid(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"14": {
		"annotation": "formal language parsing test data",
		"problem_index": 14,
		"formal_languages": [
			"Parallelogram(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"15": {
		"annotation": "formal language parsing test data",
		"problem_index": 15,
		"formal_languages": [
			"Rectangle(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"16": {
		"annotation": "formal language parsing test data",
		"problem_index": 16,
		"formal_languages": [
			"Rhombus(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"17": {
		"annotation": "formal language parsing test data",
		"problem_index": 17,
		"formal_languages": [
			"Kite(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"18": {
		"annotation": "formal language parsing test data",
		"problem_index": 18,
		"formal_languages": [
			"Square(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"19": {
		"annotation": "formal language parsing test data",
		"problem_index": 19,
		"formal_languages": [
			"Polygon(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"20": {
		"annotation": "formal language parsing test data",
		"problem_index": 20,
		"formal_languages": [
			"RegularPolygon(ABCD)"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"21": {
		"annotation": "formal language parsing test data",
		"problem_index": 21,
		"formal_languages": [
			"PointOn(Point(M),Line(AB))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"22": {
		"annotation": "formal language parsing test data",
		"problem_index": 22,
		"formal_languages": [
			"PointOn(Point(M),Arc(AB))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"23": {
		"annotation": "formal language parsing test data",
		"problem_index": 23,
		"formal_languages": [
			"PointOn(Point(A),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"24": {
		"annotation": "formal language parsing test data",
		"problem_index": 24,
		"formal_languages": [
			"Midpoint(Point(M),Line(AB))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"25": {
		"annotation": "formal language parsing test data",
		"problem_index": 25,
		"formal_languages": [
			"Circumcenter(Point(O),Triangle(ABC))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"26": {
		"annotation": "formal language parsing test data",
		"problem_index": 26,
		"formal_languages": [
			"Incenter(Point(O),Triangle(ABC))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"27": {
		"annotation": "formal language parsing test data",
		"problem_index": 27,
		"formal_languages": [
			"Centroid(Point(O),Triangle(ABC))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"28": {
		"annotation": "formal language parsing test data",
		"problem_index": 28,
		"formal_languages": [
			"Orthocenter(Point(O),Triangle(ABC))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"29": {
		"annotation": "formal language parsing test data",
		"problem_index": 29,
		"formal_languages": [
			"Parallel(Line(AB),Line(CD))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"30": {
		"annotation": "formal language parsing test data",
		"problem_index": 30,
		"formal_languages": [
			"Intersect(Point(M),Line(AB),Line(CD))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"31": {
		"annotation": "formal language parsing test data",
		"problem_index": 31,
		"formal_languages": [
			"Intersect(Point($),Line(AB),Line(CD))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"32": {
		"annotation": "formal language parsing test data",
		"problem_index": 32,
		"formal_languages": [
			"Perpendicular(Point(N),Line(AB),Line(CD))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"33": {
		"annotation": "formal language parsing test data",
		"problem_index": 33,
		"formal_languages": [
			"Perpendicular(Point($),Line(AB),Line(CD))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"34": {
		"annotation": "formal language parsing test data",
		"problem_index": 34,
		"formal_languages": [
			"PerpendicularBisector(Point(N),Line(AB),Line(CD))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"35": {
		"annotation": "formal language parsing test data",
		"problem_index": 35,
		"formal_languages": [
			"PerpendicularBisector(Point($),Line(AB),Line(CD))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"36": {
		"annotation": "formal language parsing test data",
		"problem_index": 36,
		"formal_languages": [
			"BisectsAngle(Line(BD),Angle(ABC))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"37": {
		"annotation": "formal language parsing test data",
		"problem_index": 37,
		"formal_languages": [
			"Disjoint(Line(AB),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"38": {
		"annotation": "formal language parsing test data",
		"problem_index": 38,
		"formal_languages": [
			"Disjoint(Circle(A),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"39": {
		"annotation": "formal language parsing test data",
		"problem_index": 39,
		"formal_languages": [
			"Tangent(Point(M),Line(AB),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"40": {
		"annotation": "formal language parsing test data",
		"problem_index": 40,
		"formal_languages": [
			"Tangent(Point($),Line(AB),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"41": {
		"annotation": "formal language parsing test data",
		"problem_index": 41,
		"formal_languages": [
			"Tangent(Point(M),Circle(A),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"42": {
		"annotation": "formal language parsing test data",
		"problem_index": 42,
		"formal_languages": [
			"Tangent(Point($),Circle(A),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"43": {
		"annotation": "formal language parsing test data",
		"problem_index": 43,
		"formal_languages": [
			"Intersect(Point($),Line(AB),Line(CD))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"44": {
		"annotation": "formal language parsing test data",
		"problem_index": 44,
		"formal_languages": [
			"Intersect(Point(M),Line(AB),Line(CD))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"45": {
		"annotation": "formal language parsing test data",
		"problem_index": 45,
		"formal_languages": [
			"Intersect(Point($), Point($), Line(AB),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"46": {
		"annotation": "formal language parsing test data",
		"problem_index": 46,
		"formal_languages": [
			"Intersect(Point(M), Point($), Line(AB),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"47": {
		"annotation": "formal language parsing test data",
		"problem_index": 47,
		"formal_languages": [
			"Intersect(Point($), Point(N), Line(AB),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"48": {
		"annotation": "formal language parsing test data",
		"problem_index": 48,
		"formal_languages": [
			"Intersect(Point(M), Point(N), Line(AB),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"49": {
		"annotation": "formal language parsing test data",
		"problem_index": 49,
		"formal_languages": [
			"Intersect(Point($), Point($), Circle(A),Circle(B))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"50": {
		"annotation": "formal language parsing test data",
		"problem_index": 50,
		"formal_languages": [
			"Intersect(Point(M), Point($), Circle(A),Circle(B))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"51": {
		"annotation": "formal language parsing test data",
		"problem_index": 51,
		"formal_languages": [
			"Intersect(Point($), Point(N), Circle(A),Circle(B))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"52": {
		"annotation": "formal language parsing test data",
		"problem_index": 52,
		"formal_languages": [
			"Intersect(Point(M), Point(N), Circle(A),Circle(B))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"53": {
		"annotation": "formal language parsing test data",
		"problem_index": 53,
		"formal_languages": [
			"Median(Line(AM),Triangle(ABC))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"54": {
		"annotation": "formal language parsing test data",
		"problem_index": 54,
		"formal_languages": [
			"Height(Line(DE),Triangle(ABC))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"55": {
		"annotation": "formal language parsing test data",
		"problem_index": 55,
		"formal_languages": [
			"Height(Line(DE),Trapezoid(ABCD))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"56": {
		"annotation": "formal language parsing test data",
		"problem_index": 56,
		"formal_languages": [
			"InternallyTangent(Point($),Circle(A),Circle(B))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"57": {
		"annotation": "formal language parsing test data",
		"problem_index": 57,
		"formal_languages": [
			"InternallyTangent(Point(M),Circle(A),Circle(B))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"58": {
		"annotation": "formal language parsing test data",
		"problem_index": 58,
		"formal_languages": [
			"Contain(Circle(O),Circle(O))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"59": {
		"annotation": "formal language parsing test data",
		"problem_index": 59,
		"formal_languages": [
			"CircumscribedToTriangle(Circle(O),Triangle(ABC))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"60": {
		"annotation": "formal language parsing test data",
		"problem_index": 60,
		"formal_languages": [
			"InscribedInTriangle(Circle(O),Triangle(ABC))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"61": {
		"annotation": "formal language parsing test data",
		"problem_index": 61,
		"formal_languages": [
			"Congruent(Triangle(ABC),Triangle(DEF))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"62": {
		"annotation": "formal language parsing test data",
		"problem_index": 62,
		"formal_languages": [
			"Similar(Triangle(ABC),Triangle(DEF))"
		],
		"theorem_seqs": [
			1,
			3,
			2
		]
	},
	"63": {
		"annotation": "formal language parsing test data",
		"problem_index": 63,
		"formal_languages": [
			"Equal(Add(Length(Line(AB)),Length(Arc(CD))),Sub(Length(Arc(AB)),Length(Arc(CD))))"
		],
		"theorem_seqs": [
			1
		]
	},
	"64": {
		"annotation": "formal language parsing test data",
		"problem_index": 64,
		"formal_languages": [
			"Equal(Div(Length(Arc(AB)),Length(Arc(CD))),Mul(5,m))"
		],
		"theorem_seqs": [
			1
		]
	},
	"65": {
		"annotation": "formal language parsing test data",
		"problem_index": 65,
		"formal_languages": [
			"Equal(Pow(Length(Line(AB)),2),Length(Arc(CD)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"66": {
		"annotation": "formal language parsing test data",
		"problem_index": 66,
		"formal_languages": [
			"Equal(Sum(Length(Line(AB)),Length(Line(CD)),Length(Line(EF)),Length(Line(GH))),20)"
		],
		"theorem_seqs": [
			1
		]
	},
	"67": {
		"annotation": "formal language parsing test data",
		"problem_index": 67,
		"formal_languages": [
			"Equal(Avg(Length(Line(AB)),Length(Line(CD)),Length(Line(EF)),Length(Line(GH))),5)"
		],
		"theorem_seqs": [
			1
		]
	},
	"68": {
		"annotation": "formal language parsing test data",
		"problem_index": 68,
		"formal_languages": [
			"Equal(Sin(Degree(Angle(ABC))),Cos(Degree(Angle(DEF))))"
		],
		"theorem_seqs": [
			1
		]
	},
	"69": {
		"annotation": "formal language parsing test data",
		"problem_index": 69,
		"formal_languages": [
			"Equal(Tan(Degree(Angle(ABC))),Add(m,1)"
		],
		"theorem_seqs": [
			1
		]
	},
	"70": {
		"annotation": "formal language parsing test data",
		"problem_index": 70,
		"formal_languages": [
			"Equal(Length(Line(AB)),Length(Arc(CD)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"71": {
		"annotation": "formal language parsing test data",
		"problem_index": 71,
		"formal_languages": [
			"Equal(Degree(Angle(ABC)),Degree(Sector(OAB)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"72": {
		"annotation": "formal language parsing test data",
		"problem_index": 72,
		"formal_languages": [
			"Equal(Radius(Arc(CD)),Radius(Circle(N)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"73": {
		"annotation": "formal language parsing test data",
		"problem_index": 73,
		"formal_languages": [
			"Equal(Radius(Sector(OAB)),Diameter(Circle(O)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"74": {
		"annotation": "formal language parsing test data",
		"problem_index": 74,
		"formal_languages": [
			"Equal(Perimeter(Triangle(ABC)),Perimeter(Circle(O)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"75": {
		"annotation": "formal language parsing test data",
		"problem_index": 75,
		"formal_languages": [
			"Equal(Perimeter(Sector(OAB)),Perimeter(Quadrilateral(ABCD)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"76": {
		"annotation": "formal language parsing test data",
		"problem_index": 76,
		"formal_languages": [
			"Equal(Perimeter(Polygon(EFGHI)),Area(Triangle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"77": {
		"annotation": "formal language parsing test data",
		"problem_index": 77,
		"formal_languages": [
			"Equal(Area(Circle(O)),Area(Sector(OAB)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"78": {
		"annotation": "formal language parsing test data",
		"problem_index": 78,
		"formal_languages": [
			"Equal(Area(Quadrilateral(ABCD)),Area(Polygon(EFGHI)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"79": {
		"annotation": "formal language parsing test data",
		"problem_index": 79,
		"formal_languages": [
			"Equal(Perimeter(Triangle(ABC)),Perimeter(Circle(O)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"80": {
		"annotation": "formal language parsing test data",
		"problem_index": 80,
		"formal_languages": [
			"Equal(Perimeter(Sector(OAB)),Perimeter(Quadrilateral(ABCD)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"81": {
		"annotation": "formal language parsing test data",
		"problem_index": 81,
		"formal_languages": [
			"Equal(Perimeter(Triangle(ABC)),Perimeter(Polygon(EFGHI)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"82": {
		"annotation": "formal language parsing test data",
		"problem_index": 82,
		"formal_languages": [
			"Find(Length(Line(AB)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"83": {
		"annotation": "formal language parsing test data",
		"problem_index": 83,
		"formal_languages": [
			"Find(Length(Arc(AC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"84": {
		"annotation": "formal language parsing test data",
		"problem_index": 84,
		"formal_languages": [
			"Find(Degree(Angle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"85": {
		"annotation": "formal language parsing test data",
		"problem_index": 85,
		"formal_languages": [
			"Find(Degree(Sector(OAB)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"86": {
		"annotation": "formal language parsing test data",
		"problem_index": 86,
		"formal_languages": [
			"Find(Radius(Arc(AC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"87": {
		"annotation": "formal language parsing test data",
		"problem_index": 87,
		"formal_languages": [
			"Find(Radius(Circle(O)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"88": {
		"annotation": "formal language parsing test data",
		"problem_index": 88,
		"formal_languages": [
			"Find(Radius(Sector(OAB)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"89": {
		"annotation": "formal language parsing test data",
		"problem_index": 89,
		"formal_languages": [
			"Find(Diameter(Circle(O)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"90": {
		"annotation": "formal language parsing test data",
		"problem_index": 90,
		"formal_languages": [
			"Find(Perimeter(Triangle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"91": {
		"annotation": "formal language parsing test data",
		"problem_index": 91,
		"formal_languages": [
			"Find(Perimeter(Circle(O)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"92": {
		"annotation": "formal language parsing test data",
		"problem_index": 92,
		"formal_languages": [
			"Find(Perimeter(Sector(OAB)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"93": {
		"annotation": "formal language parsing test data",
		"problem_index": 93,
		"formal_languages": [
			"Find(Perimeter(Quadrilateral(ABCD)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"94": {
		"annotation": "formal language parsing test data",
		"problem_index": 94,
		"formal_languages": [
			"Find(Perimeter(Polygon(ABCDE)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"95": {
		"annotation": "formal language parsing test data",
		"problem_index": 95,
		"formal_languages": [
			"Find(Area(Triangle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"96": {
		"annotation": "formal language parsing test data",
		"problem_index": 96,
		"formal_languages": [
			"Find(Area(Circle(O)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"97": {
		"annotation": "formal language parsing test data",
		"problem_index": 97,
		"formal_languages": [
			"Find(Area(Sector(OAB)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"98": {
		"annotation": "formal language parsing test data",
		"problem_index": 98,
		"formal_languages": [
			"Find(Area(Quadrilateral(ABCD)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"99": {
		"annotation": "formal language parsing test data",
		"problem_index": 99,
		"formal_languages": [
			"Find(Area(Polygon(ABCED)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"100": {
		"annotation": "formal language parsing test data",
		"problem_index": 100,
		"formal_languages": [
			"Find(m)"
		],
		"theorem_seqs": [
			1
		]
	},
	"101": {
		"annotation": "formal language parsing test data",
		"problem_index": 101,
		"formal_languages": [
			"Find(Add(m,1))"
		],
		"theorem_seqs": [
			1
		]
	},
	"102": {
		"annotation": "formal language parsing test data",
		"problem_index": 102,
		"formal_languages": [
			"Find(Add(Length(AB),Sin(Degree(DEF))))"
		],
		"theorem_seqs": [
			1
		]
	},
	"103": {
		"annotation": "formal language parsing test data",
		"problem_index": 103,
		"formal_languages": [
			"Find(PointOnLine(Point(M),Line(AB)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"104": {
		"annotation": "formal language parsing test data",
		"problem_index": 104,
		"formal_languages": [
			"Find(PointOnArc(Point(M),Arc(AB)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"105": {
		"annotation": "formal language parsing test data",
		"problem_index": 105,
		"formal_languages": [
			"Find(PointOnCircle(Point(M),Circle(O)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"106": {
		"annotation": "formal language parsing test data",
		"problem_index": 106,
		"formal_languages": [
			"Find(Midpoint(Point(M),Line(AB)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"107": {
		"annotation": "formal language parsing test data",
		"problem_index": 107,
		"formal_languages": [
			"Find(Circumcenter(Point(O),Triangle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"108": {
		"annotation": "formal language parsing test data",
		"problem_index": 108,
		"formal_languages": [
			"Find(Incenter(Point(O),Triangle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"109": {
		"annotation": "formal language parsing test data",
		"problem_index": 109,
		"formal_languages": [
			"Find(Centroid(Point(O),Triangle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"110": {
		"annotation": "formal language parsing test data",
		"problem_index": 110,
		"formal_languages": [
			"Find(Orthocenter(Point(O),Triangle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"111": {
		"annotation": "formal language parsing test data",
		"problem_index": 111,
		"formal_languages": [
			"Find(Parallel(Line(AB),Line(CD)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"112": {
		"annotation": "formal language parsing test data",
		"problem_index": 112,
		"formal_languages": [
			"Find(Perpendicular(Point(M),Line(AB),Line(CD)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"113": {
		"annotation": "formal language parsing test data",
		"problem_index": 113,
		"formal_languages": [
			"Find(PerpendicularBisector(Point(M),Line(AB),Line(CD)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"114": {
		"annotation": "formal language parsing test data",
		"problem_index": 114,
		"formal_languages": [
			"Find(BisectsAngle(Line(BD),Angle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"115": {
		"annotation": "formal language parsing test data",
		"problem_index": 115,
		"formal_languages": [
			"Find(DisjointLineCircle(Line(AB),Circle(O)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"116": {
		"annotation": "formal language parsing test data",
		"problem_index": 116,
		"formal_languages": [
			"Find(DisjointCircleCircle(Circle(M),Circle(N)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"117": {
		"annotation": "formal language parsing test data",
		"problem_index": 117,
		"formal_languages": [
			"Find(TangentLineCircle(Point(M),Line(AB),Circle(O)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"118": {
		"annotation": "formal language parsing test data",
		"problem_index": 118,
		"formal_languages": [
			"Find(TangentCircleCircle(Point(M),Circle(A),Circle(B)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"119": {
		"annotation": "formal language parsing test data",
		"problem_index": 119,
		"formal_languages": [
			"Find(IntersectLineLine(Point(M),Line(AB),Line(CD)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"120": {
		"annotation": "formal language parsing test data",
		"problem_index": 120,
		"formal_languages": [
			"Find(IntersectLineCircle(Point(M),Point(N),Line(AB),Circle(O)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"121": {
		"annotation": "formal language parsing test data",
		"problem_index": 121,
		"formal_languages": [
			"Find(IntersectCircleCircle(Point(M),Point(N),Circle(A),Circle(B)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"122": {
		"annotation": "formal language parsing test data",
		"problem_index": 122,
		"formal_languages": [
			"Find(Median(Line(AD),Triangle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"123": {
		"annotation": "formal language parsing test data",
		"problem_index": 123,
		"formal_languages": [
			"Find(HeightOfTriangle(Line(DE),Triangle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"124": {
		"annotation": "formal language parsing test data",
		"problem_index": 124,
		"formal_languages": [
			"Find(HeightOfTrapezoid(Line(EF),Trapezoid(ABCD)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"125": {
		"annotation": "formal language parsing test data",
		"problem_index": 125,
		"formal_languages": [
			"Find(InternallyTangent(Point(M),Circle(O),Circle(N)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"126": {
		"annotation": "formal language parsing test data",
		"problem_index": 126,
		"formal_languages": [
			"Find(Contain(Circle(O),Circle(M)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"127": {
		"annotation": "formal language parsing test data",
		"problem_index": 127,
		"formal_languages": [
			"Find(CircumscribedToTriangle(Circle(O),Triangle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"128": {
		"annotation": "formal language parsing test data",
		"problem_index": 128,
		"formal_languages": [
			"Find(InscribedInTriangle(Circle(O),Triangle(ABC)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"129": {
		"annotation": "formal language parsing test data",
		"problem_index": 129,
		"formal_languages": [
			"Find(Congruent(Triangle(ABC),Triangle(DEF)))"
		],
		"theorem_seqs": [
			1
		]
	},
	"130": {
		"annotation": "formal language parsing test data",
		"problem_index": 130,
		"formal_languages": [
			"Find(Similar(Triangle(ABC),Triangle(DEF)))"
		],
		"theorem_seqs": [
			1
		]
	}
}